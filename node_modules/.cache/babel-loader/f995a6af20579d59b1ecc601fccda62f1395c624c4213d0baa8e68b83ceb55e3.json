{"ast":null,"code":"var _jsxFileName = \"/Users/cheonsu/desoutter/product ID finding app/src/components/TextAnalyzer.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Box, Button, Container, Textarea, VStack, Text, Alert, AlertIcon } from '@chakra-ui/react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TextAnalyzer() {\n  _s();\n  const [input, setInput] = useState('');\n  const [result, setResult] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const analyzeText = async () => {\n    if (!input.trim()) {\n      setError('Please enter some text to analyze');\n      return;\n    }\n    setIsLoading(true);\n    setError('');\n    try {\n      const response = await axios.post('/api/analyze', {\n        text: input\n      });\n      setResult(response.data.result);\n    } catch (error) {\n      setError('Failed to analyze text');\n    }\n    setIsLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxW: \"container.md\",\n    py: 10,\n    children: /*#__PURE__*/_jsxDEV(VStack, {\n      spacing: 6,\n      children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n        status: \"error\",\n        children: [/*#__PURE__*/_jsxDEV(AlertIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Textarea, {\n        placeholder: \"Enter your text here...\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        size: \"lg\",\n        height: \"200px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        colorScheme: \"blue\",\n        onClick: analyzeText,\n        isLoading: isLoading,\n        width: \"full\",\n        children: \"Analyze Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), result && /*#__PURE__*/_jsxDEV(Box, {\n        p: 4,\n        borderWidth: 1,\n        borderRadius: \"md\",\n        width: \"full\",\n        backgroundColor: \"gray.50\",\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          whiteSpace: \"pre-wrap\",\n          children: result\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(TextAnalyzer, \"cgnNpUMEK4VvnVdbaXd2fOLU4aE=\");\n_c = TextAnalyzer;\nexport default TextAnalyzer;\nvar _c;\n$RefreshReg$(_c, \"TextAnalyzer\");","map":{"version":3,"names":["React","useState","Box","Button","Container","Textarea","VStack","Text","Alert","AlertIcon","axios","jsxDEV","_jsxDEV","TextAnalyzer","_s","input","setInput","result","setResult","isLoading","setIsLoading","error","setError","analyzeText","trim","response","post","text","data","maxW","py","children","spacing","status","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","size","height","colorScheme","onClick","width","p","borderWidth","borderRadius","backgroundColor","whiteSpace","_c","$RefreshReg$"],"sources":["/Users/cheonsu/desoutter/product ID finding app/src/components/TextAnalyzer.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  Button,\n  Container,\n  Textarea,\n  VStack,\n  Text,\n  Alert,\n  AlertIcon,\n} from '@chakra-ui/react';\nimport axios from 'axios';\n\nfunction TextAnalyzer() {\n  const [input, setInput] = useState('');\n  const [result, setResult] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const analyzeText = async () => {\n    if (!input.trim()) {\n      setError('Please enter some text to analyze');\n      return;\n    }\n\n    setIsLoading(true);\n    setError('');\n    try {\n      const response = await axios.post('/api/analyze', { text: input });\n      setResult(response.data.result);\n    } catch (error) {\n      setError('Failed to analyze text');\n    }\n    setIsLoading(false);\n  };\n\n  return (\n    <Container maxW=\"container.md\" py={10}>\n      <VStack spacing={6}>\n        {error && (\n          <Alert status=\"error\">\n            <AlertIcon />\n            {error}\n          </Alert>\n        )}\n        <Textarea\n          placeholder=\"Enter your text here...\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          size=\"lg\"\n          height=\"200px\"\n        />\n        <Button\n          colorScheme=\"blue\"\n          onClick={analyzeText}\n          isLoading={isLoading}\n          width=\"full\"\n        >\n          Analyze Text\n        </Button>\n        {result && (\n          <Box\n            p={4}\n            borderWidth={1}\n            borderRadius=\"md\"\n            width=\"full\"\n            backgroundColor=\"gray.50\"\n          >\n            <Text whiteSpace=\"pre-wrap\">{result}</Text>\n          </Box>\n        )}\n      </VStack>\n    </Container>\n  );\n}\n\nexport default TextAnalyzer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}